package com.picovr.picovr_GetSeeThrough;

public final class WorldLayoutData {

    public static final float[] CAM_GENERAL = {
            // positions          // colors           // texture coords
            0.3f - 0.35f, 0.3f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, // top right
            0.3f - 0.35f, -0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, // bottom right
            -0.3f - 0.35f, -0.3f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, // bottom left
            -0.3f - 0.35f, 0.3f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f  // top left
    };

    public static final short CAM_INDEX[] = {
            0, 1, 3, // first triangle
            1, 2, 3  // second triangle
    };

    public static final float[] CAM_GENERAL_RIGHT = {
            // positions          // colors           // texture coords
            0.3f + 0.35f, 0.3f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, // top right
            0.3f + 0.35f, -0.3f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f, // bottom right
            -0.3f + 0.35f, -0.3f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, // bottom left
            -0.3f + 0.35f, 0.3f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f  // top left
    };

    public static final short CAM_INDEX_RIGHT[] = {
            0, 1, 3, // first triangle
            1, 2, 3  // second triangle
    };

    public static final short[] BTN_INDEX = new short[]{
            0, 1, 2, 3, 4, 5
    };

    public static final float[] BTN_GENERAL = new float[]{
            // Front face
            -1.0f, 1.0f, 0.1f,          // pos
            0f, 0.5237f, 0.2656f, 1.0f  // color

            - 1.0f, -1.0f, 0.1f,
            0f, 0.5237f, 0.2656f, 1.0f,

            1.0f, 1.0f, 0.1f,
            0f, 0.5237f, 0.2656f, 1.0f,

            1.0f, 1.0f, 0.1f,
            0f, 0.5273f, 0.2656f, 1.0f,

            -1.0f, -1.0f, 0.1f,
            0f, 0.5273f, 0.2656f, 1.0f,


            1.0f, -1.0f, 0.1f,
            0f, 0.5273f, 0.2656f, 1.0f,


            1.0f, 1.0f, 0.1f,
            0f, 0.5273f, 0.2656f, 1.0f,
    };

    public static final float[] BTN_FOUND = new float[]{
            // Front face
            -1.0f, 1.0f, 0.1f,            //pos
            1.0f, 0.5273f, 0.0f, 1.0f,   //color

            -1.0f, -1.0f, 0.1f,
            1.0f, 0.5273f, 0.0f, 1.0f,

            1.0f, 1.0f, 0.1f,
            1.0f, 0.5273f, 0.0f, 1.0f,

            -1.0f, -1.0f, 0.1f,
            1.0f, 0.5273f, 0.0f, 1.0f,


            1.0f, -1.0f, 0.1f,
            1.0f, 0.5273f, 0.0f, 1.0f,


            1.0f, 1.0f, 0.1f,
            1.0f, 0.5273f, 0.0f, 1.0f,
    };

    public static final short[] CUBE_INDEX = new short[]{
            0, 1, 2, 3, 4, 5,
            6, 7, 8, 9, 10, 11,
            12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23,
            24, 25, 26, 27, 28, 29,
            30, 31, 32, 33, 34, 35,
    };

    public static final float[] CUBE_GENERAL = new float[]{
            // Front face
            -1.0f, 1.0f, 1.0f,            //pos
            0f, 0.5273f, 0.2656f, 1.0f,   //color
            0.0f, 0.0f, 1.0f,             //normal

            -1.0f, -1.0f, 1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, 1.0f, 1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, 1.0f,

            -1.0f, -1.0f, 1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, -1.0f, 1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, 1.0f, 1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, 1.0f,

            // Right face
            1.0f, 1.0f, 1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, -1.0f, -1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            1.0f, 0.0f, 0.0f,


            // Back face
            1.0f, 1.0f, -1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, -1.0f,

            1.0f, -1.0f, -1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, 1.0f, -1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, -1.0f,

            1.0f, -1.0f, -1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, -1.0f, -1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, 1.0f, -1.0f,
            0f, 0.5273f, 0.2656f, 1.0f,
            0.0f, 0.0f, -1.0f,

            // Left face
            -1.0f, 1.0f, -1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, -1.0f, 1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            0.0f, 0.3398f, 0.9023f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            // Top face
            -1.0f, 1.0f, -1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, 1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, 1.0f, 0.0f,

            // Bottom face
            1.0f, -1.0f, -1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, -1.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, -1.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, -1.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, -1.0f, 0.0f,

            -1.0f, -1.0f, 1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, -1.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            0.8359375f, 0.17578125f, 0.125f, 1.0f,
            0.0f, -1.0f, 0.0f,
    };

    public static final float[] CUBE_FOUND = new float[]{
            // Front face
            -1.0f, 1.0f, 1.0f,            //pos
            1.0f, 0.6523f, 0.0f, 1.0f,   //color
            0.0f, 0.0f, 1.0f,             //normal

            -1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,

            -1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,

            1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, 1.0f,

            // Right face
            1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            1.0f, 0.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            1.0f, 0.0f, 0.0f,


            // Back face
            1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, -1.0f,

            1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, -1.0f,

            1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, -1.0f,

            -1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 0.0f, -1.0f,

            // Left face
            -1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            -1.0f, 0.0f, 0.0f,

            // Top face
            -1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            1.0f, 1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            // Bottom face
            1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, -1.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, -1.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, -1.0f, 0.0f,

            1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, -1.0f, 0.0f,

            -1.0f, -1.0f, 1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, -1.0f, 0.0f,

            -1.0f, -1.0f, -1.0f,
            1.0f, 0.6523f, 0.0f, 1.0f,
            0.0f, -1.0f, 0.0f,
    };

    public static final short[] FLOOR_INDEX = new short[]{
            0, 1, 2, 3, 4, 5,
            6, 7, 8, 9, 10, 11,
            12, 13, 14, 15, 16, 17,
            18, 19, 20, 21, 22, 23,
    };

    // The grid lines on the floor are rendered procedurally and large polygons cause floating point
    // precision problems on some architectures. So we split the floor into 4 quadrants.
    public static final float[] FLOOR = new float[]{
            // +X, +Z quadrant
            2000, 0, 0,                          //pos
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,       //color
            //0.0f, 0.3398f, 0.9023f, 1.0f,
            0.0f, 1.0f, 0.0f,                   //normal

            0, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            2000, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            2000, 0, 2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            // -X, +Z quadrant
            0, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -2000, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -2000, 0, 2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -2000, 0, 2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            // +X, -Z quadrant
            2000, 0, -2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, -2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            2000, 0, -2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            2000, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            // -X, -Z quadrant
            0, 0, -2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -2000, 0, -2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -2000, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, -2000,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            -2000, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,

            0, 0, 0,
            75.0f / 255.0f, 57.0f / 255.0f, 30.0f / 255.0f, 1.0f,
            0.0f, 1.0f, 0.0f,
    };
}
